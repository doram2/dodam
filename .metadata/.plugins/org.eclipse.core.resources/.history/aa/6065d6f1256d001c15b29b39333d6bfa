package model.DAO;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.DTO.MemberDTO;

public class MemberDAO extends DataBaseInfo {
	final String COLUMNS = "MEM_NUM, MEM_NAME, MEM_REGI_DATE, MEM_ID, MEM_PW, MEM_PHONE1, MEM_PHONE2, MEM_ADDR,"
			+ " MEM_EMAIL, MEM_GENDER, MEM_BIRTH";
	
	public void memberDelete(String num) {
		con = getConnection();
		String sql = "delete from member where mem_num = ?";
		try {
			pstmt = con.prepareStatement(sql);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			close();
		}
	}
	
	public MemberDTO selectOne(String num) {
		MemberDTO dto = new MemberDTO();
		con = getConnection();
		String sql = "select "+COLUMNS+" from member where mem_num=?";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, num);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				dto.setMemAddr(rs.getString("mem_addr"));
				dto.setMemBirth(rs.getTimestamp("mem_birth"));
				dto.setMemEmail(rs.getString("mem_email"));
				dto.setMemGender(rs.getString("mem_gender"));
				dto.setMemId(rs.getString("mem_id"));
				dto.setMemName(rs.getString("mem_name"));
				dto.setMemNum(rs.getString("mem_number"));
				dto.setMemPhone1(rs.getString("mem_phone1"));
				dto.setMemPhone2(rs.getString("mem_phone2"));
				dto.setMemPw(rs.getString("mem_pw"));
				dto.setMemRegiDate(new java.util.Date(rs.getDate("mem_reg_date").getTime()));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			close();
		}
		return dto;
	}
	public List<MemberDTO> selectAll(){
		List<MemberDTO> list = new ArrayList<MemberDTO>();
		con = getConnection();
		String sql = "select "+ COLUMNS +" from member";
		try {
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				MemberDTO dto = new MemberDTO();
				dto.setMemAddr(rs.getString("mem_addr"));
				dto.setMemBirth(rs.getTimestamp("mem_birth"));
				dto.setMemEmail(rs.getString("mem_email"));
				dto.setMemGender(rs.getString("mem_gender"));
				dto.setMemId(rs.getString("mem_id"));
				dto.setMemName(rs.getString("mem_name"));
				dto.setMemNum(rs.getString("mem_num"));
				dto.setMemPhone1(rs.getString("mem_phone1"));
				dto.setMemPhone2(rs.getString("mem_phone2"));
				dto.setMemPw(rs.getString("mem_pw"));
				dto.setMemRegiDate(new java.util.Date(rs.getDate("mem_regi_date").getTime()));
				list.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return list;
	}
	
	public String numberGenerate() {
		String num = null;
		con = getConnection();
		String sql = "select nvl(max(substr(mem_num,5)), 100000)+1 from member";
		try {
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) num = rs.getString(1);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {close();}
		return num;
	}
	
	public void memberInsert(MemberDTO dto) {
		con = getConnection();
		String sql = "insert into member("+COLUMNS+") values(?,?,?,?,?,?,?,?,?,?,?)";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, dto.getMemNum());
			pstmt.setString(2, dto.getMemName());
			pstmt.setDate(3, new java.sql.Date(dto.getMemRegiDate().getTime()));
			pstmt.setString(4,  dto.getMemId());
			pstmt.setString(5, dto.getMemPw());
			pstmt.setString(6, dto.getMemPhone1());
			pstmt.setString(7, dto.getMemPhone2());
			pstmt.setString(8, dto.getMemAddr());
			pstmt.setString(9, dto.getMemEmail());
			pstmt.setString(10, dto.getMemGender());
			pstmt.setTimestamp(11, dto.getMemBirth());
			
			int i = pstmt.executeUpdate();
			System.out.println(i + "개 행이(가) 삽입되었습니다.");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {close();}
	}
	
}
